#include <stdio.h>
#include <stdlib.h> // For exit() function

int n, f, i, j, k;
int in[100];
int p[50];
int hit = 0;
int pgfaultcnt = 0;

void getData() {
    printf("\nEnter length of page reference sequence:");
    scanf("%d", &n);
    printf("\nEnter the page reference sequence:");
    for (i = 0; i < n; i++)
        scanf("%d", &in[i]);
    printf("\nEnter no of frames:");
    scanf("%d", &f);
}

void initialize() {
    pgfaultcnt = 0;
    for (i = 0; i < f; i++)
        p[i] = -1; // Initialize with -1 to represent empty frames
}

int isHit(int data) {
    hit = 0;
    for (j = 0; j < f; j++) {
        if (p[j] == data) {
            hit = 1;
            break;
        }
    }
    return hit;
}

int getHitIndex(int data) {
    int hitind = -1; // Initialize with -1 in case of no hit
    for (k = 0; k < f; k++) {
        if (p[k] == data) {
            hitind = k;
            break;
        }
    }
    return hitind;
}

void dispPages() {
    printf("Frames: ");
    for (k = 0; k < f; k++) {
        if (p[k] != -1) // Print only if the frame is occupied
            printf("%d ", p[k]);
        else
            printf("- "); // Indicate an empty frame
    }
    printf("\n");
}

void dispPgFaultCnt() {
    printf("\nTotal no of page faults: %d\n", pgfaultcnt);
}

void fifo() {
    getData();
    initialize();
    int front = 0; // Index of the front of the queue (for FIFO)
    for (i = 0; i < n; i++) {
        printf("\nFor %d : ", in[i]);
        if (isHit(in[i]) == 0) {
            p[front] = in[i];
            front = (front + 1) % f; // Move to the next frame in a circular manner
            pgfaultcnt++;
            dispPages();
        } else {
            printf("No page fault\n");
        }
    }
    dispPgFaultCnt();
}

void optimal() {
    initialize();
    int near[50];
    for (i = 0; i < n; i++) {
        printf("\nFor %d : ", in[i]);
        if (isHit(in[i]) == 0) {
            for (j = 0; j < f; j++) {
                int pg = p[j];
                int found = 0;
                near[j] = 9999; // Initialize with a large value

                for (k = i + 1; k < n; k++) {
                    if (pg == in[k]) {
                        near[j] = k;
                        found = 1;
                        break;
                    }
                }
            }

            int max = -1;
            int repindex = -1;
            for (j = 0; j < f; j++) {
                if (near[j] > max) {
                    max = near[j];
                    repindex = j;
                }
            }
            if (repindex != -1) {
                p[repindex] = in[i];
                pgfaultcnt++;
                dispPages();
            } else {
                // This should ideally not happen with proper initialization,
                // but as a safety net, replace the first frame
                if (f > 0) {
                    p[0] = in[i];
                    pgfaultcnt++;
                    dispPages();
                }
            }
        } else {
            printf("No page fault\n");
        }
    }
    dispPgFaultCnt();
}

void lru() {
    initialize();
    int used[50]; // Array to track the last used time of each frame

    for (i = 0; i < f; i++) {
        used[i] = -1; // Initialize last used time
    }

    for (i = 0; i < n; i++) {
        printf("\nFor %d : ", in[i]);
        if (isHit(in[i]) == 0) {
            int lru_index = -1;
            int min_used = i; // Initialize with current time (worst case)

            // Find the frame that was least recently used
            for (j = 0; j < f; j++) {
                if (used[j] < min_used) {
                    min_used = used[j];
                    lru_index = j;
                }
            }

            if (lru_index != -1) {
                p[lru_index] = in[i];
                used[lru_index] = i; // Update the last used time
                pgfaultcnt++;
                dispPages();
            } else {
                // This should ideally not happen with proper initialization
                if (f > 0) {
                    p[0] = in[i];
                    used[0] = i;
                    pgfaultcnt++;
                    dispPages();
                }
            }
        } else {
            printf("No page fault!\n");
            int hit_index = getHitIndex(in[i]);
            if (hit_index != -1) {
                used[hit_index] = i; // Update the last used time on a hit
            }
        }
    }
    dispPgFaultCnt();
}

int main() {
    int choice;
    while (1) {
        printf("\nPage Replacement Algorithms\n1. Enter data\n2. FIFO\n3. Optimal\n4. LRU\n5. Exit\nEnter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
        case 1:
            getData();
            break;
        case 2:
            fifo();
            break;
        case 3:
            optimal();
            break;
        case 4:
            lru();
            break;
        case 5:
            exit(0); // Use exit() for proper termination
        default:
            printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}
